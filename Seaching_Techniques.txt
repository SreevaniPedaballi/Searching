Linear search
No of comparisions are more
https://github.com/kunal-kushwaha/DSA-Bootcamp-Java/blob/main/assignments/06-searching.md

Binary search--------------
sort the array
find the Middle of the element(start index+end indes/2)
compare with target number with middle eleement and the tager num > middle then consider the right side elemeents

start=0
end=len(arr)-1
tarrget =3
is_asc=arr[start] < arr[end]
while(start <=end):
    mid=start+(end-start)/2
    if(arr[mid]==target):
        return mid
    if is_asc:
        if mid > targer:
            end=mid-1
        else mid< target:
            start=mid+1
    else:
        if mid < targer:
            end=mid-1
        else mid> target:
            start=mid+1
    
return -1



----------------------------------------------------------------------------------
smallest num greater than targer
smallest num >= target
ceiling: smallest num in an array that is greater than or equal to  given target number
eg: arr=[2,3,4,5,6,8,12,18,20]
given targer nm=13

ceiling num=18

target num=12
ceiling num=12

what are the greatest num in an aarray than given target num and find the smallest num from that
if target > arr[len(arr)-1]]:
        return -1
start=0
end=len(arr)-1
tarrget =3

while(start <=end):
    mid=start+(end-start)/2
    if mid > targer:
        end=mid-1
    else mid< target:
        start=mid+1
    else:
        return mid
return start
-------------------------------------------------------------------------------------------------
greastest num that i sless than target
floor- greatest num <=target num
greast number which is less than or equal to given target number
eg: arr=[2,3,4,5,6,8,12,17,18,20]
given targer nm=13

floor num=12
if target < arr[len(arr)-1]]:
        return -1
start=0
target num=17
floor num=17

start=0
end=len(arr)-1
tarrget =3

while(start <=end):
    mid=start+(end-start)/2
    if mid > targer:
        end=mid-1
    else mid< target:
        start=mid+1
    else:
        return mid
return end
------------------------------------------
smallest char which is greater than target


start=0
end=len(arr)-1
tarrget =3

while(start <=end):
    mid=start+(end-start)/2
    if mid > targer:
        end=mid-1
    else mid< target:
        start=mid+1
    else:
        return mid
return start%len(arr)

---------------------------------------------
find the start and eend position of given element in an array
eg: arr=[1,2,3,3,3,5,5,6,7]
given elemt: 3
ans: 2,4

start=search(arr,target,true)
if(start != -1):
    end=search(arr,target,false)
def search(arr,target,isStart: bool):
    ans=-1
    start=0
    end=len(arr)-1
    tarrget =3

    while(start <=end):
        mid=start+(end-start)/2
        if mid > targer:
            end=mid-1
        else mid< target:
            start=mid+1
        else:
            ans= mid
            if(isStar):
                end=mid-1
            else:
                start=mid+1
    return ans
---------------------------------------------
find target in an infinity array


start=0
end=1
target=15

while(targer > end):
    temp=end+1
    end=end+ (end-start+1)*2
    start=temp
return binarysearch(arr,targer,start,end)

def binarysearch(arr,target,start,end):
    while(start <=end):
        mid=start+(end-start)/2
        if mid > targer:
            end=mid-1
        else mid< target:
            start=mid+1
        else:
            return mid
    return -1
-----------------------------------------------------
Prak index in mountain array

arr=[1,2,3,4,2,3,1,0]


start=0
end=lan(arr)+1

while(start <end):
    mid=start+(endd-start)/2
    if(arr[mid] > arr[mid+1]):
        end=mid
    else:
        start=mid+1
return start # start == endd at last and no way to find maximum value
----------------------------------------------------
find in mountain array

arr=[1,2,3,4,2,3,1,0]
target =

1.find max index
2.search it in first left side array 
3.if the element not foundd in step2 go to below
search in right side array
def search():
        arr=[1,2,3,4,5,3,2,1]
        targer=3
        peak=findPeakElement(arr)
        left=binarysearch(arr,tager,0,peak)
        if left == -1:
            return binarysearch(arr,tager,peak+1,len(arr)-1)
        return left

def findPeakElement(arr):
    start=0
    end=lan(arr)+1

    while(start <end):
        mid=start+(endd-start)/2
        if(arr[mid] > arr[mid+1]):
            end=mid
        else:
            start=mid+1
    return start # start == endd at last and no way to find maximum value

def binarysearch(arr,target,start,end):
    is_asc=arr[start] < arr[end]
    while(start <=end):
        mid=start+(end-start)/2
        if(arr[mid]==target):
            return mid
        if is_asc:
            if mid > targer:
                end=mid-1
            else mid< target:
                start=mid+1
        else:
            if mid < targer:
                end=mid-1
            else mid> target:
                start=mid+1
        
    return -1

    --------------------------------------------------------------------
    Search in rotated sorted array


    arr=[1,2,3,4,5,6,7]

    1st rotation array: arr=[7,1,2,3,4,5,6]
    2nd rotation array: arr=[6,7,1,2,3,4,5]


    1.find pivot in the array.in 2nd rotation pivot is 7
    2. from where your numbers are in ascending

    6,7 are ascending(left side)
    if number not existing in left side array then search in right side
    1,2,3,4,5 are ascending(right side)

    if pivot is -1 then array is not rotated

    def search(arr):
        pivot=findpivot(arr)
        if pivot==-1:
            binarysearch(arr,target,0,len(arr)-1)
        else:
            if(arr[pivot]==target):
                return pivot
            if targer >= arr[0]:
                return binarysearch(arr,tager,0,pivot-1)
            if targer < arr[0]:
                return binarysearch(arr,tager,pivot+1,end)

    def binarysearch(arr,target,start,end):
        is_asc=arr[start] < arr[end]
        while(start <=end):
            mid=start+(end-start)/2
            if(arr[mid]==target):
                return mid
            if is_asc:
                if mid > targer:
                    end=mid-1
                else mid< target:
                    start=mid+1
            else:
                if mid < targer:
                    end=mid-1
                else mid> target:
                    start=mid+1
            
        return -1   
    # the below findpivot will not work for duplicate values in array      
    def findpivot(arr):
        start=0
        end=len(arr)-1

        while(start <= end):
            if(mid<end && arr[mid]>arr[mid+1]):
                return mid
            if(mid>start && arr[mid]<arr[mid-1]):
                return mid-1
            if(arr[mid]<=arr[start]):
                end=mid-1
            if(arr[mid]>arr[start]):
                start=mid+1
        return -1

    def findpivot_with_duplicates(arr):
        start=0
        end=len(arr)-1

        while(start <= end):
            if(mid<end && arr[mid]>arr[mid+1]):
                return mid
            if(mid>start && arr[mid]<arr[mid-1]):
                return mid-1
            if(arr[mid]==arr[start] && arr[mid]==arr[end]):
                if(arr[start]>arr[start+1])
                    return start
                start++
                if(arr[end]<arr[end-1])
                    return end-1
                end--
            # if left side is sorted then the pivot will be in right hand side
            else if(arr[start]<arr[mid] || (arr[start]==arr[mid] && arr[mid]>arr[end])):
                start=mid+1
            else:#check left hand side
                end=mid-1
        return -1
---------------------------------------------------------------
How many times array is rotated

eg:arr=[8,9,1,3,4,5]

ans: 2 times

def findRotations(arr):
    pivot=findpivot_with_duplicates(arr)
    -- if(pivot == -1):
    -- #array not rotated
    --     return 0
    -- else:
        return pivot+1
def findpivot_with_duplicates(arr):
        start=0
        end=len(arr)-1

        while(start <= end):
            if(mid<end && arr[mid]>arr[mid+1]):
                return mid
            if(mid>start && arr[mid]<arr[mid-1]):
                return mid-1
            if(arr[mid]==arr[start] && arr[mid]==arr[end]):
                if(arr[start]>arr[start+1])
                    return start
                start++
                if(arr[end]<arr[end-1])
                    return end-1
                end--
            # if left side is sorted then the pivot will be in right hand side
            else if(arr[start]<arr[mid] || (arr[start]==arr[mid] && arr[mid]>arr[end])):
                start=mid+1
            else:#check left hand side
                end=mid-1
        return -1
-----------------------------------------------------------------------------
split array largest sum

eg: arr=[2,7,6,8,1] m=2
no of possible ways to split the array is as below,

max(sum[2,7,6,8] sum[1])=max(23,1)=23
max(sum[2,7,6,]sum[8,1])=max(15,9)=15
max(sum[2,7]sum[6,8,1])=max(8,15)=15
max(sum[2]sum[7,6,8,1])=max(2,22)=22
return min(23,15,15,22)=15
min no of sunarrays we can make is a single array that is [2,7,6,8,1]
what is the max no of sun arrays we can make is [2],[7],[6],[8],[1]
max value of answer=sum([2,7,6,8,1])=max(24)=24
min value of answer=sum([2]),sum([7]),sum([6]),sum([8]),sum([1])=max(2,7,6,8,1)=8(max ele in the array)

if m=len(arr) then answer would be max value of enrtire array
if m=1 then answer would be sum of values in enrtire array

start=lower=8
end=upper=24
    [8to24]
m=2
1.mid=start+end)/2=(8+24)/2=16
no of pices=
for i in [2,7,6,8,1]:
 if 2+7+6<=16 and 8+1<=16 so no of pices=2

if no of pices <= m:
    end=mid(new start=8 and end=16)
else:
    start=mid+1
2.mid=start+end)/2=(8+16)/2=12
no of pices=
for i in [2,7,6,8,1]:
 if 2+7<=11 and 6<=11 and 8+1=9<=11 so no of pices=3

if no of pices <= m:
    end=mid(new start=8 and end=16)
else:
    start=mid+1(start=13 and end=16)
3.mid=start+end)/2=(13+16)/2=12
no of pices=
for i in [2,7,6,8,1]:
 if 2+7<=11 and 6<=11 and 8+1=9<=11 so no of pices=3

if no of pices <= m:
    end=mid(new start=8 and end=16)
else:
    start=mid+1(start=12 and end=16)

after some iterations start==end then the answer is start

Algorithum:
------------
start=0
end=0
arr=[2,7,6,8,1]
for num in arr:
    start=math.max(start,num)#at the end of loop it contains max item
    end=end+num
while start <= end:
no_of_pices=1
mid=start+(end-start)/2
sum=0
for i in len(arr)-1:
    if(sum+arr[i] > mid):
        sum=arr[i] # we need to add the eleement to new sun array
        no_of_pices++
    else:
        sum += arr[i]
    if(no_of_pices > m):
        start=mid+1
    else:
        end=mid # no of pices are less means the sub array sum is more so we need to reduce this.in array[starrt middle end] if we want to reduce then we need to move to left hand side
return start #at this point both start == end
-----------------------------------------------------------------------
2d Array search

if element == target
        return row index ,col index
else if elemeent > target
    ignore the complte column
else if element < target
    ignore the complte row


Algorithm:
----------
https://www.youtube.com/watch?v=enI_KyGLYPo&list=PL9gnSGHSqcnr_DxHsP7AW9ftq0AtAyYqJ&index=16
row=0
column=len(arr)-1

while row < len(arr) && column >=0:
    if(arr[row][column]==target):
        return [row,column]
    else if (arr[row][column] > target):
        column--
    else if(arr[row][column]<target):
        row++

return [-1,-1]



if elements are stored in sequential order

1 2 3
4 5 6
7 8 9


if element == targer
 return row,col
if element > targer:
  igonore rows after it 
 if element < target:
    ignore above rows
after ignore we will get only 2 rows and 
1. cheeck the elemeent in middle row
1 2 3
4 5 6
2.in the above case middle  is [2,5].here we have 4 parts apart from middle 
part 1: [1]
part2:[4]
part3:[3]
part4:[6]

check the target in all above 4 parts

    upper bound=last row
    lower bound=start row
